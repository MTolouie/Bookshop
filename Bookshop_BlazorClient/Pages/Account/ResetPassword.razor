@page "/Account/ResetPassword"
@inject IAccountRepository _accountRepository
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

<!--====== Section 1 ======-->
<div class="u-s-p-y-10">

    <!--====== Section Content ======-->
    <div class="section__content">
        <div class="container">
            <div class="breadcrumb">
                <div class="breadcrumb__wrap">
                    <ul class="breadcrumb__list">
                        <li class="has-separator">

                            <a href="/">Home</a>
                        </li>
                        <li class="is-marked">

                            <a href="">Signin</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<!--====== Section Content ======-->
<div class="section__content">
    <div class="container">
        <div class="row row--center">
            <div class="col-lg-6 col-md-8 u-s-m-b-30">
                <div class="l-f-o">
                    <div class="l-f-o__pad-box">
                        <h1 class="gl-h1">Reset Password</h1>

                        <EditForm Model="resetPasswordDTO" OnValidSubmit="ChangePassword" OnInvalidSubmit="InvalidSubmit" class="l-f-o__form">
                            <DataAnnotationsValidator></DataAnnotationsValidator>
                            <div style="color:red">
                                <ValidationSummary></ValidationSummary>
                            </div>
                            <input type="hidden"  @bind-value="resetPasswordDTO.Code" />
                            <div class="u-s-m-b-30">

                                <label class="gl-label" for="login-email">E-MAIL</label>

                                <input @bind-value="resetPasswordDTO.Email" class="input-text input-text--primary-style" type="text" id="login-email" placeholder="Enter E-mail">
                                
                            </div>
                            <div class="u-s-m-b-30">

                                <label class="gl-label" for="login-password">PASSWORD</label>

                                <input @bind-value="resetPasswordDTO.Password" class="input-text input-text--primary-style" type="password" id="login-password" placeholder="Enter Password">
                            </div>

                            <div class="u-s-m-b-30">

                                <label class="gl-label" for="login-password">PASSWORD</label>

                                <input @bind-value="resetPasswordDTO.ConfirmPassword" class="input-text input-text--primary-style" type="password" id="login-password" placeholder="Enter Password">
                            </div>
                            
                            <div class="gl-inline">
                                <div class="u-s-m-b-30">

                                    <button class="btn btn--e-transparent-brand-b-2" type="submit">Change Password</button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!--====== End - Section Content ======-->
<!--====== End - Section 2 ======-->
<div class="u-s-p-y-60">
</div>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name ="Code")]
    public string Code { get; set; }

    public ResetPasswordDTO resetPasswordDTO { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        resetPasswordDTO.Code = Code;
    }


    private async Task ChangePassword()
    {
        if(Code is null)
        {
            await _jsRuntime.ToastrError("Code Is Null");
            return;
        }
        //var ISCodeRight = await _accountRepository.ResetPasswordCodeConfrim(Code);

        //if (!ISCodeRight)
        //{
        //    await _jsRuntime.ToastrError("Something Went Wrong");
        //    _navigationManager.NavigateTo("/Account/ForgotPassword");
        //    return;
        //}

        //if(resetPasswordDTO.Code is null)
        //{
        //    await _jsRuntime.ToastrError("Model Code Is Null");
        //    return;
        //}


        var IsChanged = await _accountRepository.ResetPassword(resetPasswordDTO);

        if (IsChanged)
        {
            await _jsRuntime.ToastrSuccess("Password Changed Successfuly");
            _navigationManager.NavigateTo("/Account/ResetPasswordConfirmation");
            return;
        }
        else
        {
             await _jsRuntime.ToastrError("Something Went Wrong");
            _navigationManager.NavigateTo("/Account/ForgotPassword");
            return;
        }

    }


     private async Task InvalidSubmit()
    {
        if(resetPasswordDTO.Email is null)
        {
            await _jsRuntime.ToastrError($"Email Is null");
            return;
        }
        if(resetPasswordDTO.Password is null)
        {
            await _jsRuntime.ToastrError($"Password Is null");
            return;
        }
    }
}

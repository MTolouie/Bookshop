@page "/BookCoverFormats/Index"
@inject IJSRuntime _jsRuntime
@inject IBookCoverFormatRepository _BookCoverFormatRepository
@attribute [Authorize(Roles = SD.Role_Admin)]
<PageTitle>Cover Formats</PageTitle>

<div class="col-mg-10" style="margin-left:350px;margin-top:80px;max-width:500px;margin-bottom:50px;">
    <button class="btn btn-outline-primary btn-block" @onclick="ShowCreateModal">Create</button>
    <div class="card" style="margin-top:10px;">
        <div class="card-body">
            <h2 class="box-title text-center">Cover Fromats</h2>
        </div>
        <div class="card-body">
            <div class="table-stats order-table ov-h">
              @if(CoverFormatDTOs.Any())
                {
                      <table class="table ">
                    <thead>
                        <tr>
                            <th class="">#</th>
                            <th class="avatar text-center">Cover Title</th>
                            <th class="avatar text-center">Actions</th>

                        </tr>
                    </thead>
                    <tbody>
                        @{ int i = 1;}

                        @foreach (var item in CoverFormatDTOs)
                        {

                            <tr>

                                <td class="serial">@(i++)</td>
                                <td class="avatar">
                                    <div class="round-img">
                                        @item.CoverFormatTitle
                                    </div>
                                </td>

                                <td class="text-center">
                                    <button @onclick="@(()=>ShowDeleteModal(item.CoverFormatTitle,item.CoverFormatId))" class="btn btn-outline-danger">Delete</button>
                                    <button @onclick="@(()=>ShowEditModal(item.CoverFormatTitle,item.CoverFormatId))" class="btn btn-outline-warning">Edit</button>
                                </td>
                            </tr>
                            
                        }
                    </tbody>
                    </table>
                }
                else
                {
                    if (IsLoading)
                    {
                        <div class="text-center">
                            <img src="/AdminLayout/images/loader.gif" height="200" width="200">
                        </div>

                    }
                    else
                    {
                        <div class="alert alert-danger text-center">
                            <h2>No Data</h2>
                        </div>
                    }
                }
            </div> <!-- /.table-stats -->
        </div>
    </div> <!-- /.card -->
</div>  <!-- /.col-lg-8 -->
<!-- /.orders -->
<!-- Button trigger modal -->
@code
{

    public List<BookCoverFormatDTO> CoverFormatDTOs { get; set; } = new();

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        IsLoading = true;
        StateHasChanged();
        CoverFormatDTOs = await _BookCoverFormatRepository.GetAllBookCoverFormats();
        IsLoading = false;
        StateHasChanged();
    }

    private async Task ShowCreateModal()
    {
        var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                HideCloseButton = true,
                Animation = ModalAnimation.FadeInOut(0.3)
            };

        var CreateModal = Modal.Show<_BookCoverFormatCreate>("Create Book Cover", options);
        var result = await CreateModal.Result;
        if (!result.Cancelled)
        {
            CoverFormatDTOs = await _BookCoverFormatRepository.GetAllBookCoverFormats();

        }

    }

    private async Task ShowDeleteModal(string CoverFormatTitle, int CoverFormatId)
    {
        var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                HideCloseButton = true,
                Animation = ModalAnimation.FadeInOut(0.3)
            };

        ModalParameters parameters = new ModalParameters();
        parameters.Add("CoverFormatTitle", CoverFormatTitle);
        parameters.Add("CoverFormatId", CoverFormatId);


        var DeleteModal = Modal.Show<_BookCoverFormatDelete>("Delete Cover ?", parameters, options);
        var result = await DeleteModal.Result;

        if (!result.Cancelled)
        {
            CoverFormatDTOs = await _BookCoverFormatRepository.GetAllBookCoverFormats();

        }
    }

    private async Task ShowEditModal(string CoverFormatTitle, int CoverFormatId)
    {
        var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                HideCloseButton = true,
                Animation = ModalAnimation.FadeInOut(0.3)
            };

        ModalParameters parameters = new ModalParameters();
        parameters.Add("CoverFormatId", CoverFormatId);
        parameters.Add("CoverFormatTitle", CoverFormatTitle);


        var EditModal = Modal.Show<_BookCoverFormatEdit>("Update Cover ?", parameters, options);
        var result = await EditModal.Result;

        if (!result.Cancelled)
        {
            CoverFormatDTOs = await _BookCoverFormatRepository.GetAllBookCoverFormats();

        }
    }


 }


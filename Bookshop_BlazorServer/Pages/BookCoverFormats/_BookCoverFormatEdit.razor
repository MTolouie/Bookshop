@inject IBookCoverFormatRepository _bookCoverFormatRepository
@attribute [Authorize(Roles = SD.Role_Admin)]
@inject IJSRuntime _jsRuntime
@inject IHashids _hashId


<div class="simple-form">

    <div class="form-group">
        <label for="first-name">Cover Title</label>
        <input @bind="@HashedCatId" type="hidden" class="form-control" />
        <input @bind="@BookCoverDTO.CoverFormatTitle" type="text" class="form-control" />
    </div>
    @if (IsProcess)
    {
        <button class="btn btn-outline-primary btn-block"><i class="fade fa-spin fa-spinner"></i> Loading ...</button>
        <button class="btn btn-outline-secondary btn-block"><i class="fade fa-spin fa-spinner"></i> Loading ...</button>
    }
    else
    {
        <button @onclick="SubmitForm" class="btn btn-outline-primary btn-block">Update</button>
        <button @onclick="Cancel" class="btn btn-outline-secondary btn-block">Cancel</button>
    }
</div>

@code {

    public BookCoverFormatDTO BookCoverDTO { get; set; } = new();

    [Parameter]
    public int CoverFormatId { get; set; }

    [Parameter]
    public string CoverFormatTitle { get; set; }

    public bool IsProcess { get; set; } = false;

    public string HashedCatId { get; set; }

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }


    protected override async Task OnInitializedAsync()
    {
        BookCoverDTO = await _bookCoverFormatRepository.GetBookCoverFormatById(CoverFormatId);
        HashedCatId = _hashId.Encode(CoverFormatId);
    }


    async Task SubmitForm()
    {
        IsProcess = true;
        if (string.IsNullOrWhiteSpace(BookCoverDTO.CoverFormatTitle))
        {
            await _jsRuntime.ToastrError("Title Cannot Be Null");
            IsProcess = false;
            return;
        }
        BookCoverDTO.CoverFormatId = _hashId.Decode(HashedCatId)[0];
        var status = await _bookCoverFormatRepository.UpdateBookCoverFormat(CoverFormatId, BookCoverDTO);
        if (status)
        {
            await _jsRuntime.ToastrSuccess("Updated Successfuly");
            await ModalInstance.CloseAsync(ModalResult.Ok($"Updated Successfuly"));
            IsProcess = false;

        }
        else
        {
            await _jsRuntime.ToastrError("Something Went Wrong");
            await ModalInstance.CancelAsync();
            IsProcess = false;
        }
    }

    async Task Cancel()
    {
        await ModalInstance.CancelAsync();

    }
}

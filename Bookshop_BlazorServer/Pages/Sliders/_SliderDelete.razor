@inject IJSRuntime _jsRuntime
@inject ISliderRepository _sliderRepository
@inject IFileUpload _fileUpload
@inject IHttpContextAccessor _httpContextAccessor
@attribute [Authorize(Roles = SD.Role_Admin)]



<div class="container">
    <div class="form-group col-md-6">
        <label for="Name">Slider Title</label>
        <input disabled value="@slider.SliderTitle" class="form-control" style="width:300px;" placeholder="Slider Title">

    </div>

    <div class="form-group col-md-6">
        <label>Image</label>
        <img src="@slider.Image" class="rounded-circle" width="100" height="100">
    </div>

    <div class="container">
        <label for="inputAddress">Description</label>
        @((MarkupString)slider.ShortDesc)
    </div>
    <button @onclick="DeleteSlider" class="btn btn-outline-danger btn-block mb-5">Delete Slider</button>
</div>



@code {
    public SlidersDTO slider { get; set; } = new();

    [Parameter]
    public int sliderId { get; set; }

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }


    protected override async Task OnInitializedAsync()
    {
        slider = await _sliderRepository.GetSliderById(sliderId);
    }


    async Task DeleteSlider()
    {
        var slider = await _sliderRepository.GetSliderById(sliderId);

        if (slider.Image is not null)
        {
            var Url = _httpContextAccessor.GetSliderImagePath();
            string filename = slider.Image.Replace(Url, null);

            if (filename != "No_Image.jpg")
            {
                var IsDeleted = await _fileUpload.DeleteFile(filename,SD.SliderAvatar);
                if (IsDeleted)
                {

                    var state = await _sliderRepository.DeleteSliderById(sliderId);
                    if (state)
                    {
                        await _jsRuntime.ToastrSuccess("Deleted Successfuly");
                        await ModalInstance.CloseAsync(ModalResult.Ok($"Deleted Successfuly"));

                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Could Not Delete The Slider");
                        await ModalInstance.CancelAsync();

                    }

                }
                else
                {
                    await _jsRuntime.ToastrError("Could Not Delete The Image");
                    await ModalInstance.CancelAsync();

                }
            }
            else
            {

                    var state = await _sliderRepository.DeleteSliderById(sliderId);
                    if (state)
                    {
                        await _jsRuntime.ToastrSuccess("Deleted Successfuly");
                        await ModalInstance.CloseAsync(ModalResult.Ok($"Deleted Successfuly"));

                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Could Not Delete The Slider");
                        await ModalInstance.CancelAsync();

                    }

                await _jsRuntime.ToastrSuccess("Had No Image To Delete But Deleted Successfuly");
                await ModalInstance.CloseAsync(ModalResult.Ok($"Deleted Successfuly"));
            }

        }


    }
}

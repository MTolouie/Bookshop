@inject IJSRuntime _jsRuntime
@inject IAuthorRepository _authorRepository
@inject IFileUpload _fileUpload
@inject IHttpContextAccessor _httpContextAccessor
@attribute [Authorize(Roles = SD.Role_Admin)]



<div class="container">
    <div class="form-group col-md-6">
        <label for="Name">Author Name</label>
        <input disabled value="@author.AuthorName" class="form-control" style="width:300px;" id="AuthorName" placeholder="Author Name">

    </div>

    <div class="form-group col-md-6">
        <label for="AuthorImage">Image</label>
        <img src="@author.Image" class="rounded-circle" id="AuthorChosenImage" width="100" height="100">
    </div>

    <div class="container">
        <label for="inputAddress">Biography</label>
        @((MarkupString)author.Biography)
    </div>
    <button @onclick="DeleteAuthor" class="btn btn-outline-danger btn-block mb-5">Delete Author</button>
</div>



@code {
    public AuthorDTO author { get; set; } = new();

    [Parameter]
    public int authorId { get; set; }

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }


    protected override async Task OnInitializedAsync()
    {
        author = await _authorRepository.GetAuthorById(authorId);
    }


    async Task DeleteAuthor()
    {
        var author = await _authorRepository.GetAuthorById(authorId);

        if (author.Image is not null)
        {



            var Url = _httpContextAccessor.GetAuthorAvatarPath();
            string filename = author.Image.Replace(Url, null);

            if (filename != "No_Image.jpg")
            {
                var IsDeleted = await _fileUpload.DeleteFile(filename,SD.AuthorAvatar);
                if (IsDeleted)
                {

                    var state = await _authorRepository.DeleteAuthorById(authorId);
                    if (state)
                    {
                        await _jsRuntime.ToastrSuccess("Deleted Successfuly");
                        await ModalInstance.CloseAsync(ModalResult.Ok($"Deleted Successfuly"));

                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Could Not Delete The Author");
                        await ModalInstance.CancelAsync();

                    }

                }
                else
                {
                    await _jsRuntime.ToastrError("Could Not Delete The Image");
                    await ModalInstance.CancelAsync();

                }
            }
            else
            {

                    var state = await _authorRepository.DeleteAuthorById(authorId);
                    if (state)
                    {
                        await _jsRuntime.ToastrSuccess("Deleted Successfuly");
                        await ModalInstance.CloseAsync(ModalResult.Ok($"Deleted Successfuly"));

                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Could Not Delete The Author");
                        await ModalInstance.CancelAsync();

                    }

                await _jsRuntime.ToastrSuccess("Had No Image To Delete But Deleted Successfuly");
                await ModalInstance.CloseAsync(ModalResult.Ok($"Deleted Successfuly"));
            }

        }


    }
}

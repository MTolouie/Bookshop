@page "/Authors/edit/{AuthorId}"
@inject IJSRuntime _jsRuntime
@inject IAuthorRepository _authorRepository
@inject NavigationManager _navigationManager
@inject IHashids _hashId
@inject IFileUpload _fileUpload
@inject IHttpContextAccessor _httpContextAccessor
@attribute [Authorize(Roles = SD.Role_Admin)]


<div class="container" style="margin-top:100px;margin-left:50px;margin-right:50px;">
    <EditForm Model="AuthorDTO" OnValidSubmit="UpdateAuthor">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="form-row">
            <div class="form-group col-md-4">
                <label for="Name">Author Name</label>
                <InputText @bind-Value="AuthorDTO.AuthorName" class="form-control w-75" id="AuthorName" placeholder="Author Name"></InputText>
                <ValidationMessage style="color:red;margin-left:5px;" For="()=>AuthorDTO.AuthorName"></ValidationMessage>
            </div>
            <div class="form-group col-md-3 mr-5">
                <label for="AuthorImage">Author Image</label>
                <InputFile OnChange="UploadImg" class="form-control" id="AuthorImage"></InputFile>
                <ValidationMessage For="()=> AuthorDTO.Image"></ValidationMessage>
            </div>
            @if (ChosenImg is not null)
            {
                <div class="form-group col-md-3">
                    <label for="AuthorImage">Chosen Image</label>
                    <img src="@ChosenImg" class="rounded-circle" id="AuthorChosenImage" width="100" height="100">
                </div>
                @if (CurrentImage != ChosenImg)
                {
                    <a class="btn btn-outline-danger h-25 mt-4" @onclick="DeleteImage">Delete Image</a>
                }
            }
        </div>
        <div class="form-group">
            <label for="inputAddress">Biography</label>
            <BlazoredTextEditor @ref="@QuillHtml">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </ToolbarContent>
                <EditorContent>
                </EditorContent>
            </BlazoredTextEditor>
            @if (QuillError is not null)
            {
                <span class="text-danger">
                    @QuillError
                </span>
            }
        </div>
        <button type="submit" class="btn btn-outline-warning btn-block mb-5">Edit Author</button>
    </EditForm>
</div>

@code {

    [Parameter]
    public string AuthorId { get; set; }

    public AuthorDTO AuthorDTO { get; set; } = new();

    public string ChosenImg { get; set; }

    public BlazoredTextEditor QuillHtml { get; set; } = new();

    public string CurrentImage { get; set; }

    public InputFile ImageInputFile { get; set; }

    public string QuillError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthorDTO =  await _authorRepository.GetAuthorById(_hashId.Decode(AuthorId)[0]);
        CurrentImage = AuthorDTO.Image;
        ChosenImg = AuthorDTO.Image;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (!firstRender)
            return;

        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(AuthorDTO.Biography))
                {
                    await QuillHtml.LoadHTMLContent(AuthorDTO.Biography);
                }
                loading = false;
            }
            catch
            {
                await Task.Delay(10);
                loading = true;
            }
        }
        StateHasChanged();
    }



    async Task UploadImg(InputFileChangeEventArgs e)
    {
        var Url = _httpContextAccessor.GetAuthorAvatarPath();
        var fileName = CurrentImage.Replace(Url,null);
        if(fileName == "No_Image.jpg")
        {
            var fileInfo = new FileInfo(e.File.Name);
            if (fileInfo.Extension == ".png" || fileInfo.Extension == ".jpg" || fileInfo.Extension == ".jpeg")
            {
                ChosenImg = await _fileUpload.UploadFile(e.File, SD.AuthorAvatar);
            }
            else
            {
                await _jsRuntime.ToastrError("Only .png , .jpeg Or .jpg Files Are Accepted");
            }
        }
        else
        {
            var IsDeleted =  await _fileUpload.DeleteFile(fileName,SD.AuthorAvatar);
            if (IsDeleted)
            {
                var fileInfo = new FileInfo(e.File.Name);
                if (fileInfo.Extension == ".png" || fileInfo.Extension == ".jpg" || fileInfo.Extension == ".jpeg")
                {
                    ChosenImg = await _fileUpload.UploadFile(e.File, SD.AuthorAvatar);
                }
                else
                {
                    await _jsRuntime.ToastrError("Only .png , .jpg And .jpeg Files Are Accepted");
                }
            }
            else
            {
                await _jsRuntime.ToastrError("Could Not Delete The Current File");
            }
        }
    }

    async Task DeleteImage()
    {
        var Url = _httpContextAccessor.GetAuthorAvatarPath();
        string filename = ChosenImg.Replace(Url, null);

        if (filename != "No_Image.jpg")
        {
            var IsDeleted = await _fileUpload.DeleteFile(filename, SD.AuthorAvatar);
            if (IsDeleted)
            {
                await _jsRuntime.ToastrSuccess("Deleted Successfuly");
                var url = _httpContextAccessor.GetAuthorAvatarPath();
                CurrentImage = $"{url}No_Image.jpg";
                ChosenImg = null;
            }
            else
            {
                await _jsRuntime.ToastrSuccess("Something Went Wrong");
            }
        }
        else
        {
            await _jsRuntime.ToastrWarning("No Image");
        }
    }




    async Task UpdateAuthor()
    {
        var IsValid = await InvalidForm();
        if (!IsValid)
        {

            var biographyText = await QuillHtml.GetHTML();
            var sanitizer = new HtmlSanitizer();
            AuthorDTO.Biography = sanitizer.Sanitize(biographyText);
            if (ChosenImg is null)
            {
                var Url = _httpContextAccessor.GetAuthorAvatarPath();
                ChosenImg = $"{Url}No_Image.jpg";
            }

            AuthorDTO.Image = ChosenImg;

            var IsCreated = await _authorRepository.UpdateAuthor(_hashId.Decode(AuthorId)[0], AuthorDTO);
            if (IsCreated)
            {
                await _jsRuntime.ToastrSuccess("Updated Successfuly");
                _navigationManager.NavigateTo("/Authors/Index/1");
            }
            else
            {
                await _jsRuntime.ToastrError("Coult Not Update The Record");

            }
        }
    }



   

    async Task<bool> InvalidForm()
    {

        if (AuthorDTO.AuthorName is null)
        {
            await _jsRuntime.ToastrError("Author Name cannot Be Null");
            return true;
        }

        if (ChosenImg is null)
        {
            await _jsRuntime.ToastrError("Image Is null");
            return true;
        }

        var text = await QuillHtml.GetText();
        if (text.Length < 100)
        {
            await _jsRuntime.ToastrError("Author Biography Must Be More Than 100 Characters");
            QuillError = "Author Biography Must Be More Than 100 Characters";
            return true;
        }
        QuillError = "";
        return false;
    }
}

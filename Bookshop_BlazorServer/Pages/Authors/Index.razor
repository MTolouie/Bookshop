@page "/Authors/Index/{pageid:int}"
@inject IJSRuntime _jsRuntime
@inject IAuthorRepository _authorRepository
@inject NavigationManager _navigationManager
@inject IHashids _hashId
@inject IFileUpload _fileUpload
@inject IHttpContextAccessor _httpContextAccessor
@attribute [Authorize(Roles = SD.Role_Admin)]
<PageTitle>Authors</PageTitle>


<div class="col-mg-12" style="margin-left:15px;margin-right:15px;margin-top:100px;">
    <a class="btn btn-outline-primary btn-block" href="/Authors/Create">Create</a>
    <div class="card" style="margin-top:10px;">
        <div class="card-body">
            <h2 class="box-title text-center">Authors</h2>
            <div class="form-inline mt-4 ml-2">
                <div class="form-group">
                    Name : &ensp; <input @bind="Name" class="form-control" name="Name" id="Name" placeholder="Name" style="max-width:200px;">
                </div>
                <a @onclick="NavigateToIndex" class="btn btn-outline-dark btn-block  ml-3" style="max-width:70px;">
                    <i class="fa fa-eraser"></i>
                </a>
                <button @onclick="FilterTable" class="btn btn-outline-success btn-block mb-2 ml-1" style="max-width:70px;"><i class="fa fa-search"></i></button>
            </div>
        </div>
        <div class="card-body">
            <div class="table-stats order-table ov-h">
                @{
                    int j = 1;
                }


                @if (authorDTO.Any())
                {
                    <table class="table ">
                        <thead>
                            <tr>
                                <th class="serial">#</th>
                                <th class="avatar">Avatar</th>
                                <th>Name</th>

                                <th>Activity</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in authorDTO)
                            {
                                <tr>
                                    <td class="serial">@(j++)</td>
                                    <td class="avatar">
                                        <div class="round-img">
                                            <img class="rounded-circle" src="@item.Image" alt="@item.AuthorName">
                                        </div>
                                    </td>

                                    <td>  <span class="name">@item.AuthorName</span> </td>

                                    <td>
                                        <button class="btn btn-outline-danger" @onclick="()=>ShowDeleteModal(item.AuthorID)">Delete</button>
                                        <a class="btn btn-outline-warning" href="/authors/Edit/@_hashId.Encode(item.AuthorID)">Edit</a>
                                    </td>
                                </tr>
                            }

                        </tbody>
                    </table>
                }



                else
                {
                    if (IsLoading)
                    {
                        <div class="text-center">
                            <img src="/AdminLayout/images/loader.gif" height="200" width="200">
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-danger text-center">
                            <h2>No Data</h2>
                        </div>
                    }

                }

            </div>
        </div> <!-- /.table-stats -->

    </div> <!-- /.card -->
    @if (PageCount > 0)
    {
        <ul class="pagination">
            @for (int i = 1; i <= PageCount; i++)
            {
                <li class="page-item @(pageid == i ?"active" : "")"><a class="page-link mb-5" href="/authors/Index/@i">@i</a></li>
            }
        </ul>
    }
</div>  <!-- /.col-lg-8 -->
<!-- /.orders -->
@code {

    public List<AuthorDTO> authorDTO { get; set; } = new();

    [Parameter]
    public int pageid { get; set; } = 1;

    public string? Name { get; set; }

    public int PageCount { get; set; }

    public bool IsLoading { get; set; }

    [CascadingParameter]
    public IModalService Modal { get; set; }

    //protected override async Task OnInitializedAsync()
    //{
    //    await LoadData();
    //}

    private async Task LoadData()
    {

        IsLoading = true;
        StateHasChanged();
        (authorDTO, PageCount) = await _authorRepository.GetAllAuthors(pageid, Name);
        IsLoading = false;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }

    async Task FilterTable()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }

    async Task NavigateToIndex()
    {
        Name = "";
        _navigationManager.NavigateTo($"/Authors/Index/1");
        await LoadData();
    }


    private async Task ShowDeleteModal(int authorId)
    {
        var options = new ModalOptions()
            {
                Position = ModalPosition.Center,
                HideCloseButton = false,
                Animation = ModalAnimation.FadeInOut(0.3),
                ContentScrollable = true
            };

        ModalParameters parameters = new ModalParameters();
        parameters.Add("authorId", authorId);


        var DeleteModal = Modal.Show<_AuthorDelete>("Delete Author ?", parameters, options);
        var result = await DeleteModal.Result;

        if (!result.Cancelled)
        {
            await LoadData();

        }
    }


}


@page "/Authors/Create"
@inject IJSRuntime _jsRuntime
@inject IFileUpload _fileUpload
@inject IAuthorRepository _authorRepository
@inject NavigationManager _navigationManager
@inject IHttpContextAccessor _httpContextAccessor
@attribute [Authorize(Roles = SD.Role_Admin)]

<div class="container" style="margin-top:100px;margin-left:50px;margin-right:50px;">
    <EditForm Model="authorDTO" OnValidSubmit="CreateAuthor">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="form-row">
            <div class="form-group col-md-4">
                <label for="Name">Author Name</label>
                <InputText @bind-Value="authorDTO.AuthorName" class="form-control w-75" id="AuthorName" placeholder="Author Name"></InputText>
                <ValidationMessage style="color:red;margin-left:5px;" For="()=>authorDTO.AuthorName"></ValidationMessage>
            </div>
            <div class="form-group col-md-3 mr-5">
                <label for="AuthorImage">Author Image</label>
                <InputFile OnChange="UploadImg" class="form-control" id="AuthorImage"></InputFile>
                <ValidationMessage style="color:red;margin-left:5px;" For="()=>authorDTO.Image"></ValidationMessage>
            </div>
            @if (ChosenImg is not null)
            {
                <div class="form-group col-md-3">
                    <label for="AuthorImage">Chosen Image</label>
                    <img src="@ChosenImg" class="rounded-circle" id="AuthorChosenImage" width="100" height="100">
                </div>
                <a class="btn btn-outline-danger h-25 mt-4" @onclick="DeleteImage">Delete Image</a>
            }
        </div>
        <div class="form-group">
            <label for="inputAddress">Biography</label>
            <BlazoredTextEditor @ref="@QuillHtml">
                <ToolbarContent>
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                </ToolbarContent>
                <EditorContent>
                </EditorContent>
            </BlazoredTextEditor>
            @if (QuillError is not null)
            {
                <span class="text-danger">
                    @QuillError
                </span>
            }
        </div>
        <button type="submit" class="btn btn-outline-primary btn-block  mb-5">Create Author</button>
    </EditForm>
</div>

@code {

    public AuthorDTO authorDTO { get; set; } = new();

    public BlazoredTextEditor QuillHtml { get; set; } = new();

    public string ChosenImg { get; set; }

    public string QuillError { get; set; } = "";

    private async Task UploadImg(InputFileChangeEventArgs e)
    {

        var fileInfo = new FileInfo(e.File.Name);


        if (fileInfo.Extension == ".png" || fileInfo.Extension == ".jpg" || fileInfo.Extension == ".jpeg")
        {
            ChosenImg = await _fileUpload.UploadFile(e.File, SD.AuthorAvatar);
        }
        else
        {
            await _jsRuntime.ToastrError("Corrupt File");
        }
    }



    private async Task CreateAuthor()
    {

        var IsValid = await InvalidForm();
        if (!IsValid)
        {
            QuillError = "";
            var quillBiography = await QuillHtml.GetHTML();
            //StateHasChanged();
            if (quillBiography is not null)
            {
                var sanitizer = new HtmlSanitizer();
                authorDTO.Biography = sanitizer.Sanitize(quillBiography);
                if (ChosenImg is null)
                {
                    var Url = _httpContextAccessor.GetAuthorAvatarPath();
                    ChosenImg = $"{Url}No_Image.jpg";
                }
                authorDTO.Image = ChosenImg;

                var DoesExists = await _authorRepository.DoesAuthorExists(authorDTO.AuthorName);
                if (DoesExists)
                {

                    var IsCreated = await _authorRepository.AddAuthor(authorDTO);
                    if (IsCreated)
                    {
                        await _jsRuntime.ToastrSuccess($"{authorDTO.AuthorName} Added Successfuly");
                        _navigationManager.NavigateTo("/Authors/Index/1");
                    }
                    else
                    {
                        await _jsRuntime.ToastrError("Something Went Wrong");
                    }
                }
                else
                {
                    await _jsRuntime.ToastrError("This Author already Exists");
                }
            }
            else
            {
                await _jsRuntime.ToastrError("Biography Cannot Be Null");
            }
        }
    }


    //protected override async  Task OnParametersSetAsync()
    //{
    //    StateHasChanged();
    //}

    async Task DeleteImage()
    {
        var Url = _httpContextAccessor.GetAuthorAvatarPath();
        string filename = ChosenImg.Replace(Url, null);
        if(filename != "No_Image.jpg")
        {
            var IsDeleted = await _fileUpload.DeleteFile(filename, SD.AuthorAvatar);
            if (IsDeleted)
            {
                await _jsRuntime.ToastrSuccess("Deleted Successfuly");
                ChosenImg = null;

            }
            else
            {
                await _jsRuntime.ToastrError("Something Went Wrong");
            }
        }
        else
        {
            await _jsRuntime.ToastrError("Cannot Delete This File");
            return;
        }

    }

    async Task<bool> InvalidForm()
    {

        if (authorDTO.AuthorName is null)
        {
            await _jsRuntime.ToastrError("Author Name cannot Be Null");
            return true;
        }

        if (ChosenImg is null)
        {
            await _jsRuntime.ToastrError("Image Is null");
            return true;
        }

        var text = await QuillHtml.GetText();
        if (text.Length < 100)
        {
            await _jsRuntime.ToastrError("Author Biography Must Be More Than 100 Characters");
            QuillError = "Author Biography Must Be More Than 100 Characters";
            return true;
        }
        QuillError = "";
        return false;
    }

}
